.fvec projection[4], model_view[4], light_angle

.constf consts(1.0, 0.0, -1.0, 0.325)
.alias ones consts.xxxx
.alias zeros consts.yyyy
.alias minus_one consts.zzzz
.alias ambient consts.wwww

.alias inpos v0
.alias intex v1
.alias innrm v2

; Outputs
.out outpos position
.out outtc0 texcoord0
.out outclr color

; in: r0
; out: r1
.proc project
    mov r0.w, ones
    dp4 r1.x, model_view[0], r0
    dp4 r1.y, model_view[1], r0
    dp4 r1.z, model_view[2], r0
    dp4 r1.w, model_view[3], r0
.end

.proc main
    ; calculate vertex position
    mov r0, inpos
    call project
    ; add projection matrix
    dp4 outpos.x, projection[0], r1
    dp4 outpos.y, projection[1], r1
    dp4 outpos.z, projection[2], r1
    dp4 outpos.w, projection[3], r1
    ; project normal
    mov r0, innrm
    call project
    mov r2, r1
    ; project origin as well, and subtract to find normal vector
    mov r0, zeros
    call project
    mul r1, minus_one, r1
    add r2, r2, r1
    ; normalize
    dp3 r0, r2, r2
    rsq r0, r0 ; inverse square root
    mul r2, r2, r0
    ; compare to light angle
    dp3 r0, light_angle, r2
    ; clamp to [ambient, 1]
    max r0, ambient, r0
    min r0, ones, r0
    ; scale by 2 for stronger light effect
    add r0, r0, r0
    ; alpha always 1
    mov r0.w, ones
    mov outclr, r0
    ; map texture directly
    mov outtc0, intex
    end
.end
